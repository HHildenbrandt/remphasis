// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// rcpp_mcem
List rcpp_mcem(const NumericVector& brts_i, const NumericVector& init_pars_i, int sample_size, const std::string& plugin, int soc, int max_misssing, double max_lambda, const NumericVector& lower_bound_i, const NumericVector& upper_bound_i, double xtol, int num_threads, bool copy_trees, bool verbose);
RcppExport SEXP _remphasis_rcpp_mcem(SEXP brts_iSEXP, SEXP init_pars_iSEXP, SEXP sample_sizeSEXP, SEXP pluginSEXP, SEXP socSEXP, SEXP max_misssingSEXP, SEXP max_lambdaSEXP, SEXP lower_bound_iSEXP, SEXP upper_bound_iSEXP, SEXP xtolSEXP, SEXP num_threadsSEXP, SEXP copy_treesSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type brts_i(brts_iSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type init_pars_i(init_pars_iSEXP);
    Rcpp::traits::input_parameter< int >::type sample_size(sample_sizeSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type plugin(pluginSEXP);
    Rcpp::traits::input_parameter< int >::type soc(socSEXP);
    Rcpp::traits::input_parameter< int >::type max_misssing(max_misssingSEXP);
    Rcpp::traits::input_parameter< double >::type max_lambda(max_lambdaSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type lower_bound_i(lower_bound_iSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type upper_bound_i(upper_bound_iSEXP);
    Rcpp::traits::input_parameter< double >::type xtol(xtolSEXP);
    Rcpp::traits::input_parameter< int >::type num_threads(num_threadsSEXP);
    Rcpp::traits::input_parameter< bool >::type copy_trees(copy_treesSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpp_mcem(brts_i, init_pars_i, sample_size, plugin, soc, max_misssing, max_lambda, lower_bound_i, upper_bound_i, xtol, num_threads, copy_trees, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_remphasis_rcpp_mcem", (DL_FUNC) &_remphasis_rcpp_mcem, 13},
    {NULL, NULL, 0}
};

void rempahsis_init(DllInfo *dll);
RcppExport void R_init_remphasis(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    rempahsis_init(dll);
}
